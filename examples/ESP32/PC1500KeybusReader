/*
            DSC PC1500 Alarm System Virtual Keypad

   This is a keypad emulator for the Digital Security Control's (DSC)
   PC1550.  The model number of the keypad it emulates is PC1550RK.
   
   Adapted from dougkpowers/pc1550-interface for ESP32
   Adapted from taligentx/dscKeybusInterface for Homebridge 

                 Wade Daley 20201122

   Notes:
   1. The code has been tested on an ESP32 Devkit against a DSC PC1500.
   2. MQTT connection to Homebridge and Homekit verified
   3. Status reporting and message transmission to/from Homekit verified
   4. Not tested - PC1600 operation
   5. Not functional - the code does not properly detect other Keypad 
      enteries likely due to read timing issues
   6. I had compile issues and had to remove most of the class structure
   7. Status reporting is throttled to one report every 5 seconds
   8. A Status Reporting Disable Switch from Homekit has been implemented
   9. Enabling and Disabling the Alarm Panel has been partially implemented
      and tested.  

   There are four wires that go to the keypad:
      Red    - Voltage.  This should be about 12V.  On my system, a
               voltage meter read 13.3V with a brand new battery.  You
               should be able to safely use this as a power supply for the
               Arduino.  Simply connect the red line to the pin labeled Vin.
               The Arduino's internal voltage regulator will take care
               of the rest.  Because the PC1550 has a backup battery
               supply, your Arduino will continue to be powered even
               when the electrity goes out (quite convenient).
               The ESP32 DEV Kit has a 5V to 3.3V regulator. I used a 12V to
               5V buck regulator to step down from the controller's voltage.
      Black  - Ground.  If you're using the PC1550 to supply power to
               the Arduino/ESP32, connect this to the GND pin next to the Vin pin
      Yellow - Clock.  The PC1550 control panel determines the clock cycle.
               So long as the processClockCycle() method on this class is
               called more frequently than half a clock cycle from the PC1550
               then we will safely be able to read and write signals from
               the PC1550 control panel. The total cycle is about 1500-1600
               micro-seconds, on average (roughly 650 Hz).  Because data
               is sent when the clock is low and read when the clock is high,
               we must run the processClockCycle() method at least every
               800 micro-seconds.  The more frequently the processClockCycle
               method is called, the more likely data transmission will
               succeed (in both directions) without data loss.  If you're
               not sure if you can commit to a calling the processClockCycle()
               function frequently enough, then you can use
               processTransmissionCycle() instead which will call
               processClockCycle() and block until a full transmission cycle
               is complete.  This could be handy if your program is performing
               another task that could use significant clock cycles between
               calls to processClockCycle().  On the downside,
               processTransmissionCycle() takes between 57ms and 104ms to
               complete.

               Connect the clock line up to either a digital or analog pin.
               We only read on this line using digitalRead, so either a
               digital or analog pin will do.  Analog PIN 4 is the default
               but can be overriden via the constructor to this class.
               For the ESP32, I used a voltage divider consisting of 22Kohm
               and a 6.8Kohm resistors to ensure that no more than 3.3V is
               applied to the GPIO pin.

      Green  - Data.  The data line is used to send bits to and from the
               PC1550 when the clock is low and high, respectively.

               Connect this line to any analog pin.  While we can read
               data from the panel using only digital functions, we
               must use analog functions to pull the pin low when we
               want to send data back to the control panel.  Analog pin 3
               is the default but can be overridden via the contructor.
               For the ESP32, I used a voltage divider consisting of 22Kohm
               and a 6.8Kohm resistors to ensure that no more than 3.3V is
               applied to the GPIO pin.

   There is one additional connection that can be made that can provide
   additinal state information from the alarm controller.

      Blue   - PGM.  The PGM terminal on the DSC PC1550 control panel
               can be programmed to do a number of things.  One option
               is to configure it as a 2nd data line.  The installation
               manual refers to the PC16-OUT module.  This module reads
               data from the PGM line and we can emulate that module here.
               This line does not go to the keypad, and is optional for
               use by this library.  See: http://www.alarmhow.net/manuals/
                    DSC/Modules/Output%20Modules/PC16-OUT.PDF
               for a listing of options.
               For the PGM terminal to work, it will need to be connected to the
               AUX+ terminal with a 1k Ohm resistor (for PC1550s)

               I did not verify operation of the PGM function in this sketch
               as it is disabled on my system.

    Below is the wiring setup for the ESP32

                                           +--- dscClockPin (esp8266: D1, D2, D8)
                                           |                (ESP32: clockpin)
        DSC Yellow --- 15k ohm resistor ---|
                ESP32: 22k ohm             +--- 10k ohm resistor --- Ground
                                        ESP32: 6.8k

                                           +--- dscReadPin (esp8266: D1, D2, D8)
                                           |               (ESP32: datapin)
        DSC Green ---- 15k ohm resistor ---|
                ESP32: 22k ohm             +--- 10k ohm resistor --- Ground
                                        ESP32: 6.8k

    Virtual keypad (optional):
        DSC Green ---- NPN collector --\
                                        |-- NPN base --- 1k ohm resistor --- dscWritePin (esp8266: D1, D2, D8)
              Ground --- NPN emitter --/                                                 (ESP32: dataout)

    Virtual keypad uses an NPN transistor to pull the data line low - most small signal NPN transistors should
    be suitable, for example:
     -- 2N3904, PN2222
     -- BC547, BC548, BC549

   The PC1550 control panel starts by holding the clock high for
   roughly 26.5ms.  It then clocks out 16 cycles (one cycle is represented
   by the clock going low and then returning to a high state).  After
   16 clock cycles, the PC1550 holds the clock high for roughly 26.5ms
   again, which starts the entire cycle over.

   During the 16 clock cycles data is received when the clock is high:
      - The first 8 clock cycles are used to send one octet (byte)
        of data to the keypad (one bit per clock cycle).  This byte
        contains information about which zones are currently open
        (what zone lights should display on the keypad).  For this
        reason, the first 8 bits are referred to here as "zone bits."

        The table below shows how the data is received and interpretted.
        Bit 7 is received first, and bit 0 is recieved last.  When bit 7
        is on, then the zone 1 light should be on; when bit 6 is on, then
        the zone 2 light should be on, etc.  Bits 1 and 0 are not used.

            Zone Bit    7    6    5    4    3    2    1    0
            Zone        1    2    3    4    5    6  (Not Used)

      - The second 8 clock cycles send 8 more bits.  This byte contains
        information about the other lights that should be enabled on
        the keypad.  These bits represent other states and therefore,
        these bits are referred to here as "state bits."

        The table below shows how each bit is used. Note that when bit 0
        is on, the keypad beep emits a short beep.

      State Bit    7       6       5       4       3       2       1        0
                 Ready   Armed   Memory  Bypass Trouble  --Not Used--     Beep

   Between receipt of the zone bits, data can be sent back to the control
   panel when the clock is low.  In other words, the panel sends out its
   bits when the clock is high and the keypad sends back its data when the
   clock is low.

   The keypad only sends back 7 bits-- one bit between each of the 8 zone
   bits received.  These bits represent a button press.  When taking the
   keypad as a table (rows and columns) of buttons, the first three
   bits received represent the column of the button pressed.  The last
   four bits represent the row of the button pressed:

             First Three Bits                Last 4 Bits
        Column 1      100                    Row 1   0001
        Column 2      010                    Row 2   0010
        Column 3      001                    Row 3   0100
                                             Row 4   1000
                                             Row 5   0000

     No Key Pressed   000                            0000

   Encoding bits in the data line:
     When the data line is LOW  the corresponding bit should be ON.
     When the data line is HIGH the corresponding bit should be OFF.

   If the PGM line is connected, then 16 more bits of data are received
   on this line if (and ONLY IF) the PGM line is configured in PC-16OUT
   mode.  Refer to the PC1550 installation manual for instructions on
   how to configure this mode.  The bits meaning follow:
      0 - PGM Output (whatever the PGM is configured for)
          (This library assumes PGM terminal has been programmed for
           strobe output.  This sets bit 0 to the on position
           when the alarm goes off.  And the bit remains set until
           the panel is disarmed).
      1 - Fire buttom pressed (on for 4 sec)
      2 - Aux button pressed (on for 4 sec)
      3 - Panic button pressed (on for 4 sec)
      4 - Armed
      5 - Armed
      6 - Armed with bypass (on for 5 sec)
      7 - Trouble
      8 - Fire (on when fire alarm is latched in)
      9 - Not used
     10 - Zone 6 tripped while armed
     11 - Zone 5 tripped while armed
          ...
     15 - Zone 1 tripped while armed

*/

#include <WiFi.h>
#include <PubSubClient.h>
#include <cstdlib>
#include <HeartBeat.h>
#include <string.h>

// Name of this file (without the path) which we can use to identify the version of code that is running
#define __FILENAME__ (strrchr(__FILE__, '/') ? strrchr(__FILE__, '/') + 1 : __FILE__)

// Replace the next variables with your SSID/Password combination
const char* ssid      = "";
const char* password  = "";
WiFiClient    dscClient;

// Add your MQTT Broker IP address, example:
const char* mqtt_server = "";
const int   willQoS = 1;
const bool  willRetain = true;
const char* willMessageOff = "off";
const char* willMessageOn  = "on";
PubSubClient  client(dscClient);

//vars for sending a message to the broker every msg_interval
char    msg[50];
char    tempString[8];
long    msg_interval = 5000;
long    lastMsg     = 0;
long    now         = 0;
int     value       = 0;

//the pins are attached to the controller
uint8_t clockpin  = 36;
uint8_t datapin   = 39;
uint8_t pgmpin    = 34; //optional, if PGM16 is enabled on your controller
uint8_t dataout   = 12;

//serial port input
byte read_byte    = 0;

//create Hearbeat object
Heartbeat           HB;

//set to true when we are synchronized with the controller
bool synchronized;

//the number of bits successfully read from the controller
//since the start of the last transmission cycle
uint8_t controller_bits_read;

//the controller bits that have been read so far in the transmission cycle
uint16_t controller_data;

//the last set of data completely received from the controller
uint16_t available_controller_data;

//available controller data value when last printed/published
uint16_t last_print_data;
uint16_t last_publish_data;

//implements a print/publish message throttling system that limits 
//print/publish to no more than max_count message every msg_interval
int print_count;
int publish_count;
int max_count;

// indicators that print/publish has been disabled
bool print_disabled;
bool publish_disabled;

//indicates the available controller_data was changed from the last
//transmission cycle.  Can be set to false until new data is received
//by calling stateHandled();
bool bStateChanged;

//the number of bits successfully read from other keypads (or our own
//emulated keypad since the start of the last transmission cycle).
uint8_t keypad_bits_read;

//the keypad bits that have been read so far in the transmission cycle
uint8_t keypad_data;

//the last set of keypad data completely read
uint8_t available_keypad_data;

//the pc16out (PGM) bits that have been read so far in the tx cycle
uint16_t pc16out_data;

//the pc16out (PGM) bits that have been completely read
uint16_t available_pc16out_data;

//the last key released (in keypad_data format)
uint8_t key_released_data;

//indicates the key was pressed on this cycle
bool bKeyPressed;

//indicates that a key was released on this cycle
bool bKeyReleased;

//the consecutive transmission cycles of the key being held
uint8_t iConsecutiveKeyPressCycles;

//the last time the clock was low
unsigned long last_read;

//the last time we checked, was the clock high or low?
bool last_clock;

//number of cycles without a keypress
uint8_t cyclesWithoutKey;

//whether or not we should be transmitting key bits
bool transmitting;

//sometimes we want to simulate a press and hold
//the Fire key (F), for example, only works if held for a few seconds
//this variable indicates for how many more cycles we should
//send the key
uint8_t keyHoldCycles;

//the next byte of data we should transmit to the control panel
//the value is set to zero once succesfully sent
uint8_t key_to_send;

//the number of bits we have sent to the control panel from keyCodeToSend
uint8_t keypad_bits_sent;

//the number of consecutive transmission cycles that have signaled a beep
int iConsecutiveBeeps;

//true for one execution of processClockCycle
//and only when finished reading all 16 bits
bool bTransmissionEnd;

static char getKeyChar(uint8_t value);
uint8_t     getKeyValue(char key);

void processClockCycle();
void processTransmissionCycle();

//keypad emulation and status
bool keypadStateChanged();
char keyPressed();
char keyReleased();
bool Zone1Light();
bool Zone2Light();
bool Zone3Light();
bool Zone4Light();
bool Zone5Light();
bool Zone6Light();
bool ReadyLight();
bool ArmedLight();
bool MemoryLight();
bool BypassLight();
bool TroubleLight();
bool Beep();
uint16_t consecutiveBeeps();
uint16_t consecutiveKeyPresses();
bool atTransmissionEnd();
bool readyForKeyPress();
bool sendKey(char c, uint8_t holdCycles = 1);

//the following are available only when the PC16OUT is enabled
//and the PGM terminal from the panel is connected
bool PGMOutput();
bool fireButtonTripped();
bool auxButtonTripped();
bool panicButtonTripped();
bool systemArmed();
bool armedWithByPass();
bool systemTrouble();
bool fireAlarmTripped();
bool Zone1Tripped();
bool Zone2Tripped();
bool Zone3Tripped();
bool Zone4Tripped();
bool Zone5Tripped();
bool Zone6Tripped();
bool AlarmTripped();


/* ==================================================================== */
/*       S T A T I C    /    P R I V A T E      H E L P E R S           */
/*   Convert ASCII key values to the byte values for key transmission   */
/* ==================================================================== */
char getKeyChar(byte value) {
  switch (value)
  {
    case 0b01000001: return '1';
    case 0b00100001: return '2';
    case 0b00010001: return '3';
    case 0b01000010: return '4';
    case 0b00100010: return '5';
    case 0b00010010: return '6';
    case 0b01000100: return '7';
    case 0b00100100: return '8';
    case 0b00010100: return '9';
    case 0b01001000: return '*';
    case 0b00101000: return '0';
    case 0b00011000: return '#';
    case 0b01000000: return 'F';
    case 0b00100000: return 'A';
    case 0b00010000: return 'P';
    default: return '\0';
  }
}

uint8_t getKeyValue(char key) {
  switch (key)
  {
    case '1': return 0b01000001;
    case '2': return 0b00100001;
    case '3': return 0b00010001;
    case '4': return 0b01000010;
    case '5': return 0b00100010;
    case '6': return 0b00010010;
    case '7': return 0b01000100;
    case '8': return 0b00100100;
    case '9': return 0b00010100;
    case '*': return 0b01001000;
    case '0': return 0b00101000;
    case '#': return 0b00011000;
    case 'F': return 0b01000000;
    case 'A': return 0b00100000;
    case 'P': return 0b00010000;
    default: return 0;
  }
}

/* ==================================================================== */
/*                S T A T E    I N F O    A N D    M G M T              */
/* ==================================================================== */
bool keypadStateChanged() {
  return bStateChanged;
}

char keyPressed() {
  if (!bKeyPressed)
    return '\0';
  return getKeyChar(available_keypad_data);
}

char keyReleased() {
  if (key_released_data == 0)
    return '\0';
  return getKeyChar(key_released_data);
}

bool Zone1Light() {
  return (available_controller_data & 0x8000) > 0;
}

bool Zone2Light() {
  return (available_controller_data & 0x4000) > 0;
}

bool Zone3Light() {
  return (available_controller_data & 0x2000) > 0;
}

bool Zone4Light() {
  return (available_controller_data & 0x1000) > 0;
}

bool Zone5Light() {
  return (available_controller_data & 0x0800) > 0;
}

bool Zone6Light() {
  return (available_controller_data & 0x0400) > 0;
}

bool ReadyLight() {
  return (available_controller_data & 0x0080) > 0;
}

bool ArmedLight() {
  return (available_controller_data & 0x0040) > 0;
}

bool MemoryLight() {
  return (available_controller_data & 0x0020) > 0;
}

bool BypassLight() {
  return (available_controller_data & 0x0010) > 0;
}

bool TroubleLight() {
  return (available_controller_data & 0x0008) > 0;
}

bool Beep() {
  return (available_controller_data & 0x0001) > 0;
}

uint16_t consecutiveBeeps() {
  return iConsecutiveBeeps;
}

bool atTransmissionEnd() {
  return bTransmissionEnd;
}

uint16_t consecutiveKeyPresses() {
  return iConsecutiveKeyPressCycles;
}

bool readyForKeyPress() {
  if (keyHoldCycles > 0 || cyclesWithoutKey < 1) {
    return false;
  }
  return true;
}

bool sendKey(char c, uint8_t holdCycles) {
  if (!readyForKeyPress())
    return false;
  uint8_t keyval = getKeyValue(c);
  if (keyval == 0) {
    return false;
  }
  key_to_send = keyval;
  keyHoldCycles = holdCycles;
  return true;
}

//configured based on programming of PC1550
bool PGMOutput() {
  return (available_pc16out_data & 0b0000000000000001) > 0;
}

//active for 4 seconds after button is held for 20 clock cycles
bool fireButtonTripped() {
  return (available_pc16out_data & 0b0000000000000010) > 0;
}

//active for 4 seconds after button is held for 20 clock cycles
bool auxButtonTripped() {
  return (available_pc16out_data & 0b0000000000000100) > 0;
}

//active for 4 seconds after button is held for 20 clock cycles
bool panicButtonTripped() {
  return (available_pc16out_data & 0b0000000000001000) > 0;
}

//constantly on whenever system is armed
bool systemArmed() {
  return (available_pc16out_data & 0b0000000000110000) > 0;
}

//pulses for 5 seconds when the system is armed with bypass
bool armedWithByPass() {
  return (available_pc16out_data & 0b0000000001000000) > 0;
}

//active during a trouble condition
bool systemTrouble() {
  return (available_pc16out_data & 0b0000000010000000) > 0;
}

//active so long as fire alarm is latched in
bool fireAlarmTripped() {
  return (available_pc16out_data & 0b0000000100000000) > 0;
}

//will only return true when system is armed
bool Zone6Tripped() {
  return (available_pc16out_data & 0b0000010000000000) > 0;
}

//will only return true when system is armed
bool Zone5Tripped() {
  return (available_pc16out_data & 0b0000100000000000) > 0;
}

//will only return true when system is armed
bool Zone4Tripped() {
  return (available_pc16out_data & 0b0001000000000000) > 0;
}

//will only return true when system is armed
bool Zone3Tripped() {
  return (available_pc16out_data & 0b0010000000000000) > 0;
}

//will only return true when system is armed
bool Zone2Tripped() {
  return (available_pc16out_data & 0b0100000000000000) > 0;
}

//will only return true when system is armed
bool Zone1Tripped() {
  return (available_pc16out_data & 0b1000000000000000) > 0;
}

//returns true of any of the zones are tripped when system is armed
bool AlarmTripped() {
  return (available_pc16out_data & 0b1111110000000000) > 0;
}

/* ==================================================================== */
/*        C O N S T R U C T I O N     A N D    P R O C E S S I N G      */
/* ==================================================================== */


//this calls processClockCycle() until a full 16 bits are read and processed
//this takes (at a minimum) 57ms.  If out of synchronization, this could
//take twice as long (104ms).
void processTransmissionCycle() {
  do {
    processClockCycle();
  }
  while (!atTransmissionEnd());
}

//This processes every clock cycle from the PC1550 control panel.
//This should be called within the main loop() function at least
//every 800us.  If you're not sure you can commit to that frequency
//then call processTransmissionCycle() which will hold control for
//at least one full transmission cycle
void processClockCycle() {

  //clear the bTransmissionEnd flag
  bTransmissionEnd = false;

  //setup to read clock, data and pgm values
  bool  clock;
  bool  data;
  bool  pgmData;

  int   count     = 0;
  bool  clock_tst = 0;
  while (count < 3) {     //keep reading pins until 3 consecutive identical clock readings are obtained
    clock   = digitalRead(clockpin);
    count++;
    if (clock_tst ^ clock) {
      count = 0;
      clock_tst = clock;
    }
  };
  data    = digitalRead(datapin);
  pgmData = digitalRead(pgmpin);

  //how long has it been since we last read a byte?
  unsigned long time_since_last_read = micros() - last_read;

  //if the clock is hanging (clock line is remains HIGH so clock
  //variable remains false for an extended period) then the controller
  //is telling us that it is done with its last transmission cycle.
  //we can now enter a synchronized state
  if (!clock && time_since_last_read > 25000 && time_since_last_read < 28000) {

    //at this point we should be synchronized
    synchronized = true;

    //reset the cycle
    controller_bits_read  = 0;
    controller_data       = 0;
    pc16out_data          = 0;
    keypad_bits_read      = 0;
    keypad_data           = 0;
    keypad_bits_sent      = 0;
  }

  //key press bits are transmitted when the clock is HIGH
  //a HIGH clock line means the clock variable will be false
  if (!clock && last_clock != clock) {
    //we read key presses via the 7 bits transmitted BETWEEN
    //the first 8 bits received from the control planel
    if (controller_bits_read > 0 && controller_bits_read < 8) {
      uint8_t bitValue = (uint8_t)(data);
      //update our keypad_data field and increment the count of bits read
      keypad_data |= (bitValue << (6 - keypad_bits_read));
      keypad_bits_read++;
    }//end if between bits 1 and 8
  } //end clock HIGH read loop

  //we read controller and PGM16 bits on a LOW clock line
  //a LOW clock line will mean the clock variable will be true
  if (clock && last_clock != clock) {

    //update the last time we read a bit
    last_read = micros();

    //store the bit read (controller data)
    uint16_t dataValue = ((uint16_t)data) << (15 - controller_bits_read);
    controller_data |= dataValue;

    //store the bit read (pc16out data)
    dataValue = ((uint16_t)pgmData) << (15 - controller_bits_read);
    pc16out_data |= dataValue;

    //update the number of bits read
    controller_bits_read++;

    //if this is the first bit, see if we should be sending a key
    if (synchronized && controller_bits_read == 1) {
      if (key_to_send != 0) {
        cyclesWithoutKey = 0;
        transmitting = true;
      }
      else
        cyclesWithoutKey++;
    }

    //sanity check
    if (controller_bits_read >= 8)
      transmitting = false;

    //this will let the voltage float to whatever the panel is driving
    //which will allow other keypads to drive the line and for us to
    //see what other keypads are driving between receive bits
    //if no other keypad is driving, the line will pull high since
    //the dsc 1550 panel is pulling high...so the line should go back to 5v
    //    pinMode(datapin, INPUT);
    digitalWrite(dataout, LOW);

    //if in transmit mode
    if (transmitting) {
      //it is going to pull HIGH by default, so we only drive
      //low if the bit for this place in the sequence is set
      if (((key_to_send >> (7 - controller_bits_read)) & 0x01)) {
        //this will effectively pull the voltage low on the line
        //getting it close to zero (if not zero)
        //        pinMode(datapin, OUTPUT);
        digitalWrite(dataout, HIGH);
      }

      //if we've sent the last bit, we can clear our key sending fields
      if (controller_bits_read == 7) {
        if (keyHoldCycles > 0) keyHoldCycles--;
        if (keyHoldCycles == 0) {
          key_to_send = 0;
        }
      }
    }//end if we have a key to write
  }//end LOW clock cycle processing

  //if we successfully received 16 bits, then update available data
  if (synchronized && controller_bits_read == 16) {
    if (available_controller_data != controller_data)
      bStateChanged = true;
    else
      bStateChanged = false;

    //if we received keypad_data
    if (keypad_data != 0) {
      //if it's the exact same as last time
      if (available_keypad_data == keypad_data) {
        bKeyPressed = false;
        key_released_data = 0;
        iConsecutiveKeyPressCycles++;
      }
      else if (available_keypad_data == 0) {
        bKeyPressed = true;
        key_released_data = 0;
        iConsecutiveKeyPressCycles = 1;
      }
      else if (available_keypad_data != 0) {
        //this is a highly unlikely state
        //where two different key-presses occur in back to back cycles
        //the PC1550 controller does require a cycle of no transmission
        //between each key-press so this *should* never occur
        bKeyPressed = true;
        iConsecutiveKeyPressCycles = 1;
        key_released_data = available_keypad_data;
      }
    }
    //if keypad_data == 0
    else {
      if (available_keypad_data != 0) {
        bKeyPressed = false;
        key_released_data = available_keypad_data;
      }
      else if (available_keypad_data == 0) {
        key_released_data = 0;
        bKeyPressed = false;
        iConsecutiveKeyPressCycles = 0;
      }
    }
    //update receieved data
    available_keypad_data     = keypad_data;
    available_controller_data = controller_data;
    available_pc16out_data    = pc16out_data;

    //update iConsecutiveBeeps
    if (!Beep()) iConsecutiveBeeps = 0;
    else iConsecutiveBeeps++;

    //indicate we are at the end of our transmission cycle
    bTransmissionEnd = true;

    //just in case the next call to processClockCycle is delayed
    //let's assume that we lose our synchronization
    synchronized          = false;
    controller_bits_read  = 0;
  }
  last_clock = clock;
}//end processClockCycle()


void setup_wifi() {
  // this process establishes and maintains the wifi connection
  // builtin led will fast flash while waiting for connection to wifi
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.print(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    digitalWrite(LED_BUILTIN, LOW);      //wifi connection waiting diag light
    delay(250);
    digitalWrite(LED_BUILTIN, HIGH);
    delay(250);
    Serial.print(".");
  }
  Serial.println("connected ");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* message, unsigned int length) {
  // this process handles mqtt messages from the broker

  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(" Message: ");

  String messageTemp;
  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
    messageTemp += (char)message[i];
  }
  Serial.println(" ");

  // Process received messages
  if (String(topic) == "dsc/Set/Disable") {
    if (messageTemp == "on") {
      Serial.println("Alarm Reporting Disabled");
      print_disabled = true;
      publish_disabled = true;
      client.publish("dsc/Get/Disable", "on");
    }
    if (messageTemp == "off") {
      Serial.println("Alarm Reporting Enabled");
      print_disabled  = false;
      publish_disabled = false;
      client.publish("dsc/Get/Disable", "off");
    }
  }
  if (String(topic) == "dsc/Set/Status") {            //these commands are responded to but not acted on
    Serial.println("Responding");
    if (messageTemp ==  "D") {                       //Disable Alarm command
      client.publish("dsc/Get/Status", "D");
    }
    if (messageTemp ==  "NA") {                      //Night Alarm command
      client.publish("dsc/Get/Status", "NA");
    }
    if (messageTemp ==  "AA") {                      //Away Alarm command
      client.publish("dsc/Get/Status", "AA");
    }
    if (messageTemp ==  "SA") {                      //Home Alarm command
      client.publish("dsc/Get/Status", "SA");
    }
  }
}

void reconnect() {
  // this process connects and maintains the message broker connection
  // builtin led will slow flash while waiting for connection to the broker

  while (!client.connected()) {         // Loop until connected
    Serial.print("Attempting MQTT connection...");
    if (client.connect("dscClient", "dsc/Get/Will", willQoS, willRetain, willMessageOff)) { //connect and register will
      Serial.println("connected");
      //subscribe to topics
      client.subscribe("dsc/Set/Status");
      client.subscribe("dsc/Set/Disable");
      //print and publish initial controller state
      client.publish("dsc/Get/Will", willMessageOn, willRetain);
      if (print_disabled || publish_disabled) {
        client.publish("dsc/Get/Disable", "on");
      }
      else {
        client.publish("dsc/Get/Disable", "off");
      }
      printState();
      publishState();
    }
    else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      digitalWrite(LED_BUILTIN, LOW);      //mqtt connection waiting diag light slow flashing
      delay(2500);
      digitalWrite(LED_BUILTIN, HIGH);
      delay(2500);
    }
  }
}

void setup() {
  // put your setup code here, to run once:

  pinMode(datapin, INPUT);
  pinMode(clockpin, INPUT);
  pinMode(pgmpin, INPUT);
  pinMode(dataout, OUTPUT);

  //when nothing else is driving the data pin, we want
  //it to remain in the low state.  This sets us up to (by default)
  //send "No Key Press" to the controller.
  digitalWrite(dataout, LOW);

  //set our control and state variables up
  synchronized  = false;
  last_read     = micros();
  last_clock    = HIGH;
  key_to_send   = 0;
  keyHoldCycles = 0;
  bKeyPressed   = false;
  key_released_data = 0;
  cyclesWithoutKey  = 0;
  transmitting      = false;
  controller_bits_read = 0;
  controller_data = 0;
  available_controller_data = 0;
  last_print_data = 0;
  last_publish_data = 0;
  print_count   = 0;
  publish_count = 0;
  print_disabled    = false;
  publish_disabled  = false;
  max_count         = 1;
  keypad_bits_read  = 0;
  keypad_data       = 0;
  available_keypad_data = 0;
  keypad_bits_sent  = 0;
  iConsecutiveBeeps = 0;
  iConsecutiveKeyPressCycles = 0;
  bStateChanged     = false;
  bTransmissionEnd  = false;
  pc16out_data            = 0;
  available_pc16out_data  = 0;

  pinMode(LED_BUILTIN, OUTPUT); //setup heartbeat flash once per second
  HB.begin(LED_BUILTIN, 1);

  Serial.begin(115200);         //open up the serial port
  Serial.println("");
  Serial.print("Running: ");
  Serial.println(__FILENAME__); //identify which code version is running

  setup_wifi();
  client.setServer(mqtt_server, 1883);  //define connections to the mqtt server and connect
  client.setCallback(callback);
  if (!client.connected()) {
    reconnect();
  }
}

void loop() {
  //This processes a clock cycle from the PC1550 control panel.
  //This should be called within the loop() function at least
  //every 800us.  If you're not sure you can commit to that frequency
  //then call processTransmissionCycle() which will hold control for
  //at least one full transmission cycle

  // maintain connection to wifi and mqtt server and process incoming messages
  if (WiFi.status() != WL_CONNECTED) {
    setup_wifi();
  };
  if (!client.connected()) {
    reconnect();
  }

  client.loop();                    // process incoming messages
  HB.beat();                        // flash the builtin led
  processClockCycle();              // process a controller clock cycle

  //print-publish controller and PGM16 state
  if (last_print_data != available_controller_data) {
    printState();
  }
  if (last_publish_data != available_controller_data) {
    publishState();
  }
  // read any input from the serial console and process it
  process_serial_input();

  // put stuff here that you want done every message interval
  now = millis();
  if (now - lastMsg > msg_interval) {
    lastMsg       = now;
    publish_count = 0;  //reset throttling counts
    print_count   = 0;
  }
}  //end main loop

void process_serial_input () { 
  //this process will read keypad command data from the serial port and send it to the controller

  if ((Serial.available() > 0) && readyForKeyPress()) {
    read_byte = Serial.read();
    if (read_byte != 10) {      //ignore the LF character which follows all strings from the serial port
      Serial.print("\n");
      Serial.print("Sending: ");
      if (sendKey(read_byte)) {
        Serial.write(read_byte);
        Serial.println(" ");
      }
      else {
        Serial.println("Error");
      }
      printState();
    }
  }
}

void publishState() { 
  // publish controller state info
  
  if (!publish_disabled) {
    if (publish_count < max_count) {                  //check if we should throttle, messages per interval
      publish_count++;
      last_publish_data = available_controller_data;
      /* ReadyLight()   ? client.publish("dsc/Get/Status","R") : client.publish ("dsc/Get/Status", "nR");
        ArmedLight()   ? client.publish("dsc/Get/Status","A") : client.publish ("dsc/Get/Status", "nA");
        MemoryLight()  ? client.publish("dsc/Get/Status","M") : client.publish ("dsc/Get/Status", "nM");
        BypassLight()  ? client.publish("dsc/Get/Status","B") : client.publish ("dsc/Get/Status", "nB");
        TroubleLight() ? client.publish("dsc/Get/Status","T") : client.publish ("dsc/Get/Status", "nT");
        Beep()         ? client.publish("dsc/Get/Status","B") : client.publish ("dsc/Get/Status", "nB"); */
      Zone1Light() ? client.publish("dsc/Get/Zone1", "on") : client.publish ("dsc/Get/Zone1", "off");
      Zone2Light() ? client.publish("dsc/Get/Zone2", "on") : client.publish ("dsc/Get/Zone2", "off");
      Zone3Light() ? client.publish("dsc/Get/Zone3", "on") : client.publish ("dsc/Get/Zone3", "off");
      Zone4Light() ? client.publish("dsc/Get/Zone4", "on") : client.publish ("dsc/Get/Zone4", "off");
      Zone5Light() ? client.publish("dsc/Get/Zone5", "on") : client.publish ("dsc/Get/Zone5", "off");
      Zone6Light() ? client.publish("dsc/Get/Zone6", "on") : client.publish ("dsc/Get/Zone6", "off");
    }
  }
}

void printState() {
  //print controller state info
  
  if (!print_disabled) {
    if (print_count < max_count) {                  //check if we should throttle
      print_count++;
      last_print_data = available_controller_data;
      ReadyLight() ? Serial.print("|R") : Serial.print("| ");
      ArmedLight() ? Serial.print("A") : Serial.print(" ");
      MemoryLight() ? Serial.print("M") : Serial.print(" ");
      BypassLight() ? Serial.print("B") : Serial.print(" ");
      TroubleLight() ? Serial.print("T|") : Serial.print(" |");
      Zone1Light() ? Serial.print("1") : Serial.print(" ");
      Zone2Light() ? Serial.print("2") : Serial.print(" ");
      Zone3Light() ? Serial.print("3") : Serial.print(" ");
      Zone4Light() ? Serial.print("4") : Serial.print(" ");
      Zone5Light() ? Serial.print("5") : Serial.print(" ");
      Zone6Light() ? Serial.print("6|") : Serial.print(" |");
      Beep() ? Serial.print("B| ") : Serial.print(" | ");

      fireButtonTripped()  ? Serial.print("F") : Serial.print(" ");
      auxButtonTripped()   ? Serial.print("A") : Serial.print(" ");
      panicButtonTripped() ? Serial.print("P|") : Serial.print(" |");
      systemArmed() ? Serial.print("Armed   |") : Serial.print("Disarmed|");
      Zone1Tripped() ? Serial.print("1") : Serial.print(" ");
      Zone2Tripped() ? Serial.print("2") : Serial.print(" ");
      Zone3Tripped() ? Serial.print("3") : Serial.print(" ");
      Zone4Tripped() ? Serial.print("4") : Serial.print(" ");
      Zone5Tripped() ? Serial.print("5") : Serial.print(" ");
      Zone6Tripped() ? Serial.print("6") : Serial.print(" ");
      AlarmTripped() ? Serial.print("|A|") : Serial.print("| |");
      Serial.println();
    }
  }
}
